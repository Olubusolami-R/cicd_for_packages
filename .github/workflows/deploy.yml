name: Build and Publish Libraries

on:
  workflow_dispatch: 
    inputs:
        language:
          description: 'Select the programming language'
          required: true
          type: choice
          options:
            - Python
            - JavaScript
            - Go
            - Java
        versionType:
          description: 'Version type to increment'
          required: true
          type: choice
          options:
            - major
            - minor
            - patch
          default: minor

jobs:
  build-and-publish-java:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language=='Java'}}

    permissions:
      contents: read
      packages: write  # Write access for publishing to GitHub Packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Echo selected language
        run: |
          echo The entered value ${{github.events.inputs.language}}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Get current version
        working-directory: cicd-java
        id: get_current_version
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV

      - name: Echo the current version
        run: echo "The current version is ${{ env.CURRENT_VERSION }}"

      - name: Increment Java version
        working-directory: cicd-java
        id: increment_java_version
        run: |
          version="${{ env.CURRENT_VERSION }}"
          IFS='.' read -r major minor patch <<< "$version" 

          case "${{ github.event.inputs.versionType}}" in
            major)
              major=$((major+1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor+1))
              patch=0
              ;;
            patch)
              patch=$((patch+1))
              ;;
          esac

          new_version="$major.$minor.$patch"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
        
      - name: Echo the new version
        run: echo "The new version is ${{ env.NEW_VERSION }}"

      - name: Update the version in pom.xml
        working-directory: cicd-java
        run: |
          mvn versions:set -DnewVersion=${{ env.NEW_VERSION }}
      
      - name: Check new version
        working-directory: cicd-java
        id: check_new
        run: |
          latest_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV
          echo "The latest version set in pom.xml is ${{ env.LATEST_VERSION }}"
          
      # - name: Configure git
      #   working-directory: cicd-java
      
      # - name: Tag this version
      #   working-directory: cicd-java

      # - name: Commit changes
      #   working-directory: cicd-java

      # - name: Build and Publish to GitHub Packages
      #   working-directory: cicd-java
      #   run: mvn clean install deploy
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: Create GitHub release
      #   if: success()
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}  # Use the current tag (e.g., v1.0.0)
      #     release_name: Release ${{ github.ref }}  # Customize release name
      #     body: |
      #       ## Changes
      #       - Release of Java-${{ github.ref }}
      #     draft: false
      #     prerelease: false